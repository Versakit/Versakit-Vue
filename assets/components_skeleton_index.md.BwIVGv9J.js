const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/index.DJ_IokG0.js","assets/chunks/theme.9IXME9ou.js","assets/chunks/framework.Cpyw2Gc9.js"])))=>i.map(i=>d[i]);
import{p as h,D as r,v as p,aj as k,B as c,c as E,o as u,ai as n,a1 as m,G as e,a2 as g,k as a,w as l,ak as b}from"./chunks/framework.Cpyw2Gc9.js";import{O as y,E as v}from"./chunks/index.CSC85q1C.js";const _=`<script setup lang="ts">
import Basic from './basic.vue'
import Text from './text.vue'
import Avatar from './avatar.vue'
import Combined from './combined.vue'
<\/script>

<template>
  <div class="space-y-10">
    <div>
      <h2 class="text-xl font-medium mb-4">基础骨架屏</h2>
      <Basic />
    </div>

    <div>
      <h2 class="text-xl font-medium mb-4">文本骨架屏</h2>
      <Text />
    </div>

    <div>
      <h2 class="text-xl font-medium mb-4">头像骨架屏</h2>
      <Avatar />
    </div>

    <div>
      <h2 class="text-xl font-medium mb-4">组合示例</h2>
      <Combined />
    </div>
  </div>
</template>
`,C=JSON.parse('{"title":"Skeleton 骨架屏","description":"","frontmatter":{},"headers":[],"relativePath":"components/skeleton/index.md","filePath":"components/skeleton/index.md"}'),x={name:"components/skeleton/index.md"},A=Object.assign(x,{setup(f){const d=h(!0),s=r();return p(async()=>{s.value=(await k(async()=>{const{default:i}=await import("./chunks/index.DJ_IokG0.js");return{default:i}},__vite__mapDeps([0,1,2]))).default}),(i,t)=>{const o=c("ClientOnly");return u(),E("div",null,[t[1]||(t[1]=n(`<h1 id="skeleton-骨架屏" tabindex="-1">Skeleton 骨架屏 <a class="header-anchor" href="#skeleton-骨架屏" aria-label="Permalink to &quot;Skeleton 骨架屏&quot;">​</a></h1><p>在内容加载过程中显示的占位符组件，提供更好的用户体验。</p><h2 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引入组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Skeleton, SkeletonText, SkeletonAvatar } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@versakit/vue&#39;</span></span></code></pre></div><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><p>Skeleton组件可以在数据加载时显示占位符，减少用户等待的焦虑感。</p>`,6)),m(e(a(y),null,null,512),[[g,d.value]]),e(o,null,{default:l(()=>[e(a(v),{title:"",description:"",locale:"",select:"vue",order:"vue,react,html",github:"",gitlab:"",theme:"",lightTheme:"",darkTheme:"",stackblitz:"%7B%22show%22%3Afalse%7D",codesandbox:"%7B%22show%22%3Afalse%7D",codeplayer:"%7B%22show%22%3Afalse%7D",files:"%7B%22vue%22%3A%7B%7D%2C%22react%22%3A%7B%7D%2C%22html%22%3A%7B%7D%7D",scope:"",visible:!0,onMount:t[0]||(t[0]=()=>{d.value=!1}),vueCode:a(_)},b({_:2},[s.value?{name:"vue",fn:l(()=>[e(a(s))]),key:"0"}:void 0]),1032,["vueCode"])]),_:1}),t[2]||(t[2]=n(`<h2 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h2><p>Versakit提供了三个骨架屏相关组件：</p><ol><li><code>Skeleton</code> - 基础骨架屏组件</li><li><code>SkeletonText</code> - 文本骨架屏组件</li><li><code>SkeletonAvatar</code> - 头像骨架屏组件</li></ol><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="skeleton-props" tabindex="-1">Skeleton Props <a class="header-anchor" href="#skeleton-props" aria-label="Permalink to &quot;Skeleton Props&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>animation</td><td>动画效果类型</td><td><code>&#39;pulse&#39; | &#39;wave&#39; | &#39;none&#39;</code></td><td><code>&#39;pulse&#39;</code></td></tr><tr><td>loading</td><td>是否显示骨架屏</td><td><code>boolean</code></td><td><code>true</code></td></tr><tr><td>rounded</td><td>是否为圆角</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td>width</td><td>自定义宽度</td><td><code>string | number</code></td><td>-</td></tr><tr><td>height</td><td>自定义高度</td><td><code>string | number</code></td><td>-</td></tr><tr><td>unstyled</td><td>是否使用无样式模式</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td>pt</td><td>传递模板样式</td><td><code>SkeletonPT</code></td><td>-</td></tr></tbody></table><h3 id="skeletontext-props" tabindex="-1">SkeletonText Props <a class="header-anchor" href="#skeletontext-props" aria-label="Permalink to &quot;SkeletonText Props&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>lines</td><td>显示的行数</td><td><code>number</code></td><td><code>3</code></td></tr><tr><td>widths</td><td>每行宽度，可以是数组或者单个值</td><td><code>(string | number)[] | string | number</code></td><td><code>[&#39;100%&#39;, &#39;100%&#39;, &#39;80%&#39;]</code></td></tr><tr><td>lineHeight</td><td>行高</td><td><code>string | number</code></td><td><code>&#39;1rem&#39;</code></td></tr><tr><td>animation</td><td>动画效果类型</td><td><code>&#39;pulse&#39; | &#39;wave&#39; | &#39;none&#39;</code></td><td><code>&#39;pulse&#39;</code></td></tr><tr><td>rounded</td><td>是否为圆角</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td>unstyled</td><td>是否使用无样式模式</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td>pt</td><td>传递模板样式</td><td><code>SkeletonTextPT</code></td><td>-</td></tr></tbody></table><h3 id="skeletonavatar-props" tabindex="-1">SkeletonAvatar Props <a class="header-anchor" href="#skeletonavatar-props" aria-label="Permalink to &quot;SkeletonAvatar Props&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>size</td><td>头像大小</td><td><code>&#39;xs&#39; | &#39;sm&#39; | &#39;md&#39; | &#39;lg&#39; | &#39;xl&#39;</code></td><td><code>&#39;md&#39;</code></td></tr><tr><td>circle</td><td>是否为圆形</td><td><code>boolean</code></td><td><code>true</code></td></tr><tr><td>animation</td><td>动画效果类型</td><td><code>&#39;pulse&#39; | &#39;wave&#39; | &#39;none&#39;</code></td><td><code>&#39;pulse&#39;</code></td></tr><tr><td>unstyled</td><td>是否使用无样式模式</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td>pt</td><td>传递模板样式</td><td><code>SkeletonAvatarPT</code></td><td>-</td></tr></tbody></table><h3 id="skeleton-插槽" tabindex="-1">Skeleton 插槽 <a class="header-anchor" href="#skeleton-插槽" aria-label="Permalink to &quot;Skeleton 插槽&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>default</td><td>加载完成后显示的内容</td></tr><tr><td>skeleton</td><td>自定义骨架屏内容</td></tr></tbody></table><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ol><li><p><strong>合理使用动画</strong>：动画可以吸引用户注意力，但过多的动画可能会分散注意力。根据实际需要选择合适的动画效果。</p></li><li><p><strong>模拟真实内容</strong>：骨架屏应尽可能模拟实际内容的结构和布局，这样在内容加载完成后，用户不会感到突兀。</p></li><li><p><strong>组合使用</strong>：将<code>Skeleton</code>、<code>SkeletonText</code>和<code>SkeletonAvatar</code>组件组合使用，可以创建更复杂的加载占位符。</p></li><li><p><strong>控制加载状态</strong>：通过<code>loading</code>属性控制骨架屏的显示和隐藏，当数据加载完成时，自动显示实际内容。</p></li></ol><h2 id="自定义样式" tabindex="-1">自定义样式 <a class="header-anchor" href="#自定义样式" aria-label="Permalink to &quot;自定义样式&quot;">​</a></h2><p>可以通过<code>pt</code>属性自定义组件样式，或者使用<code>unstyled</code>属性移除默认样式后自行添加样式。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Skeleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ root: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;custom-skeleton-class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SkeletonText</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ root: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;custom-text-class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;custom-line-class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SkeletonAvatar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ root: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;custom-avatar-class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,17))])}}});export{C as __pageData,A as default};
