import{_ as s,c as a,o as t,ai as l}from"./chunks/framework.dgRUQZ7Z.js";const E=JSON.parse('{"title":"前端娱乐圈？又来一个组件库？我们做了组件库才明白这是有意义的！","description":"","frontmatter":{},"headers":[],"relativePath":"blog/docs/01.md","filePath":"blog/docs/01.md"}'),e={name:"blog/docs/01.md"};function h(n,i,p,r,k,d){return t(),a("div",null,i[0]||(i[0]=[l(`<h1 id="前端娱乐圈-又来一个组件库-我们做了组件库才明白这是有意义的" tabindex="-1">前端娱乐圈？又来一个组件库？我们做了组件库才明白这是有意义的！ <a class="header-anchor" href="#前端娱乐圈-又来一个组件库-我们做了组件库才明白这是有意义的" aria-label="Permalink to &quot;前端娱乐圈？又来一个组件库？我们做了组件库才明白这是有意义的！&quot;">​</a></h1><p>在开始开发 Versakit 之前，我们也曾有过同样的疑问：市面上已经有这么多优秀的组件库了，为什么还要做「又一个组件库」？前端领域常被戏称为「娱乐圈」，每天都有新的框架和工具涌现，这些重复的轮子真的在推动技术进步吗？</p><h2 id="为什么要做「又一个组件库」" tabindex="-1">为什么要做「又一个组件库」？ <a class="header-anchor" href="#为什么要做「又一个组件库」" aria-label="Permalink to &quot;为什么要做「又一个组件库」？&quot;">​</a></h2><p>前端领域常被戏称为「娱乐圈」——每天都有新框架、新工具涌现。我们曾困惑：这真的是在推动技术进步吗？直到亲身开发组件库后，我们才理解：每一次技术探索都是对工程本质的回归。</p><h2 id="阶段成果速览-🏹" tabindex="-1">阶段成果速览 🏹 <a class="header-anchor" href="#阶段成果速览-🏹" aria-label="Permalink to &quot;阶段成果速览 🏹&quot;">​</a></h2><ul><li>30+  基础组件开发完成</li><li>CLI 工具链建设中</li><li>富文本编辑器+Markdown渲染附属项目启动</li><li>每周 npm 下载量突破 100+</li></ul><h2 id="一、架构设计三亮点-🚀" tabindex="-1">一、架构设计三亮点 🚀 <a class="header-anchor" href="#一、架构设计三亮点-🚀" aria-label="Permalink to &quot;一、架构设计三亮点 🚀&quot;">​</a></h2><ol><li>渐进式主题系统</li></ol><p>暗黑模式：prefers-color-scheme + CSS Variables 双引擎驱动 色彩阶梯：colors.ts 中 0-10 色阶的数学化建模 智能适配：按钮文字颜色自动对比度校验（WCAG 2.1 标准）</p><ol start="2"><li>类型安全体系</li></ol><p>精准的类型提示：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ButtonSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;sm&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;md&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lg&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">custom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>Props 泛型约束：类型守卫保障合法字段 事件溯源：emit 类型系统实现事件流追踪</p><ol start="3"><li>工程化实践</li></ol><ul><li>Monorepo 架构：模块边界清晰化</li><li>原子化 CSS：Unocss 实现样式零冗余</li><li>自动化流水线：脚本化构建流程提升 3 倍效率</li></ul><h2 id="二、核心竞争优势" tabindex="-1">二、核心竞争优势 <a class="header-anchor" href="#二、核心竞争优势" aria-label="Permalink to &quot;二、核心竞争优势&quot;">​</a></h2><table><thead><tr><th>能力维度</th><th>Versakit 方案</th><th>竞品常见方案</th></tr></thead><tbody><tr><td>主题定制</td><td>CSS 变量 + 运行时动态注入</td><td>SASS 变量 / 全局 CSS 覆盖</td></tr><tr><td>类型系统深度</td><td>TypeScript 集成</td><td>基础 PropTypes 校验</td></tr><tr><td>包体积</td><td>按需加载 + Tree-shaking</td><td>全量引入</td></tr><tr><td>组件通信</td><td>Provide/Inject 上下文体系</td><td>独立 Props 传递</td></tr><tr><td>可测试性</td><td>Vitest + Testing Library 整合</td><td>Vitest 单测为主</td></tr></tbody></table><h2 id="三、潜在亮点挖掘" tabindex="-1">三、潜在亮点挖掘 <a class="header-anchor" href="#三、潜在亮点挖掘" aria-label="Permalink to &quot;三、潜在亮点挖掘&quot;">​</a></h2><ol><li>交互状态机设计</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stateMachine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	initial: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;idle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	states: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		idle: { on: { HOVER: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hover&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		hover: { on: { PRESS: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;active&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		active: { on: { RELEASE: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;idle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>可访问性增强</li></ol><p>检测到 ARIA 属性的部分实现 可扩展方向：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;switch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aria-checked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isChecked</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aria-disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">disabled</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="3"><li>性能优化策略 静态 DOM 分析：<code>v-once</code> 在卡片组件中的应用 异步插槽渲染：检测到 <code>$slots</code> 的动态加载判断 样式隔离：<code>:where() </code>选择器的使用减少特异性</li></ol><p>也许我们的组件库不会被很多人所使用，不会很出名，不会有什么功利上的作用，但是，通过做这件事情，我们真真切切体会到了什么是一个合格的前端工程师！</p><h2 id="开发组件库教会我们的事" tabindex="-1">开发组件库教会我们的事 <a class="header-anchor" href="#开发组件库教会我们的事" aria-label="Permalink to &quot;开发组件库教会我们的事&quot;">​</a></h2><p>打破「增删改查」困局 作为在校学生团队，我们曾困于业务开发的表层逻辑。组件库开发让我们深入理解：</p><h3 id="_1-前端工程化闭环-🛠️" tabindex="-1">1. 前端工程化闭环 🛠️ <a class="header-anchor" href="#_1-前端工程化闭环-🛠️" aria-label="Permalink to &quot;1. 前端工程化闭环 🛠️&quot;">​</a></h3><pre><code> 从脚手架搭建到 CI/CD 流水线，完整走通「开发-构建-测试-发布」全链路。实践出真知：
</code></pre><h3 id="_2-软件工程思维升级-🪜" tabindex="-1">2. 软件工程思维升级 🪜 <a class="header-anchor" href="#_2-软件工程思维升级-🪜" aria-label="Permalink to &quot;2. 软件工程思维升级 🪜&quot;">​</a></h3><p>设计模式：工厂模式创建组件实例 架构设计：插件系统实现横向扩展 代码规范：ESLint + Prettier 保障代码一致性</p><h3 id="_3-基础能力重构-💡" tabindex="-1">3. 基础能力重构 💡 <a class="header-anchor" href="#_3-基础能力重构-💡" aria-label="Permalink to &quot;3. 基础能力重构 💡&quot;">​</a></h3><p>CSS 层叠奥秘：:where() 选择器实现样式隔离 状态管理：基于 Proxy 的轻量级响应式系统 渲染优化：虚拟滚动性能提升 5 倍+</p><h3 id="_4-团队协作范式-🤝" tabindex="-1">4. 团队协作范式 🤝 <a class="header-anchor" href="#_4-团队协作范式-🤝" aria-label="Permalink to &quot;4. 团队协作范式 🤝&quot;">​</a></h3><ul><li>Git Flow 工作流</li><li>RFC 提案机制</li><li>代码 Review 文化</li></ul><h2 id="我们接下来要做什么" tabindex="-1">我们接下来要做什么？ <a class="header-anchor" href="#我们接下来要做什么" aria-label="Permalink to &quot;我们接下来要做什么？&quot;">​</a></h2><blockquote><p>无头组件 + 主题系统的化学效应</p></blockquote><p>传统组件库的样式覆盖如同「开盲盒」，而 PrimeVue 的 Unstyled Mode 给出新思路： 经常使用或关注Nuxt的朋友应该或多或少有接触过PrimeVue这个库，在我们团队看来这是Vue生态中无头组件（Headless Components）  和 主题系统 融合的很好的解决方案，所以受到他们的启发，我们也决定接下来在我们的组件库中集成类似的解决方案</p>`,38)]))}const c=s(e,[["render",h]]);export{E as __pageData,c as default};
