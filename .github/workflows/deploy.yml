# 此工作流程用于将项目部署到 GitHub Pages。
# 当 `main` 分支有新的推送时，或者手动从 GitHub Actions 选项卡触发时，工作流程将自动运行。

name: 部署文档到GitHub Pages

on:
  push:
    branches: [main] # 仅在 main 分支有推送时触发
    paths:
      - 'docs/**'
      - 'packages/**'
      - '.github/workflows/deploy.yml'
      - 'pnpm-lock.yaml'

  # 允许从 Actions 选项卡手动运行此工作流程
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    name: 构建并部署文档
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 设置 pnpm
      - name: 设置 pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      # 设置 Node.js
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # 设置 pnpm 缓存
      - name: 获取 pnpm store 目录
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 配置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 安装依赖
      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      # 代码检查
      - name: 代码检查
        run: pnpm run lint

      # 构建 UI 组件库
      - name: 构建 UI 组件库
        run: pnpm run ui:build

      # 构建文档
      - name: 构建文档
        run: pnpm --filter docs build

      # 配置 GitHub Pages
      - name: 配置 GitHub Pages
        uses: actions/configure-pages@v4

      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vitepress/dist

      # 部署到 GitHub Pages
      - name: 部署到 GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
